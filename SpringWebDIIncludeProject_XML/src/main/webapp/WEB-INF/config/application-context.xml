<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">

<!-- AOP -->
<aop:aspectj-autoproxy/>


<mvc:annotation-driven>
    <mvc:message-converters>
        <!-- @ResponseBody로 String 처리할때 한글처리 -->
        <bean class="org.springframework.http.converter.StringHttpMessageConverter">
            <property name="supportedMediaTypes">
                <list>
                    <value>text/html;charset=UTF-8</value>
                </list>
            </property>
        </bean>
    </mvc:message-converters>
</mvc:annotation-driven>
<!-- 사용자 정의 클래스 등록 : 아래 경로로 시작하는 모든 클래스에 메모리 할당 
		클래스 선별
			1) Model : HandlerMapping에 의해서 찾기 => 스프링에서 메모리 할당 요청
			2) DAO, Service
			3) 일반 클래스 : 크롤링, OpenAPI ...
			=> @Component : 크롤링, OpenAPI 
			   @Repository : DAO 
			   @Service : Service
			   @Controller : Model
			   @RestController : Model
			   @ControllerAdvice : 공통 예외처리 (@Controller) 
			   @Configuration : XML 대신 환경 설정
			   @RestControllerAdvice : 공통 예외처리 (@RestController) 
				이것들을 메모리 할당 해준다
				
			=> 어노테이션과 XML에 등록 할 수 없다
				= 두 개씩 생성
				= 어노테이션 : 사용자 정의 클래스
				= XML : 라이브러리 (어노테이션이 없다)
			================================================================
			어노테이션 이용시에 DI도 어노테이션을 이용한다
			@Autowired : 자동 객체 주소 주입 (스프링이 해당 객체르 ㄹ찾아서 주소값을 주입) 
			@PostConstruct : init-method (객체 생성시 자동 호출하는 메소드 지정)
			@PreDestroy : destroy-method (객체 소멸시 자동 호출되는 메소드 지정)
			@Resource : 특정 객체를 찾는 경우 (ID를 설정해서 객체를 찾는다)
			@Resource(name="dao") : 단점 JDK 1.8까지만 사용 가능
					
-->
<context:component-scan base-package="com.sist.*/"/>	

<!-- ViewResolver : jsp 찾아주는 역할 => 경로명,확장자 줘야 함 
	bean? 라이브러리 등록
-->
<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver"
	p:prefix="/"
	p:suffix=".jsp"
/>

<!-- 파일 업로드 : cos.jar
	 여러 개 동시에 업로드 가능
 -->
<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"
/>
</beans>


